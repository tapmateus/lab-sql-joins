### LAB | SQL Joins


#1. List the number of films per category.
SELECT category_id, COUNT(*) FROM sakila.film_category
GROUP BY category_id;

#2. Retrieve the store ID, city, and country for each store.


#3. Calculate the total revenue generated by each store in dollars.


#4. Determine the average running time of films for each category.
select name, round(avg(length), 2) as avg_length
from sakila.film
inner join (
			select film_id, name
			from sakila.film_category
			inner join(
						select name, category_id
						from sakila.category) as t
			on film_category.category_id = t.category_id) as t1
on film.film_id = t1.film_id
group by name
order by avg_length desc;

###   Bonus:
#5. Identify the film categories with the longest average running time.

select length, name as category
from sakila.film
inner join (
			select film_id, name
			from sakila.film_category
			inner join (
						select category_id, name
						from sakila.category) t
			on t.category_id = film_category.category_id) t1
on t1.film_id = film.film_id
group by category;


#6. Display the top 10 most frequently rented movies in descending order.



#7. Determine if "Academy Dinosaur" can be rented from Store 1.



#8. Provide a list of all distinct film titles, along with their availability status in the inventory. Include a column indicating whether each title is 'Available' or 'NOT available.' Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL."




/* Here are some tips to help you successfully complete the lab:

Tip 1: This lab involves joins with multiple tables, which can be challenging. Take your time and follow the steps we discussed in class:

		Make sure you understand the relationships between the tables in the database. 
        This will help you determine which tables to join and which columns to use in your joins.
		
        Identify a common column for both tables to use in the ON section of the join. 
		If there isn't a common column, you may need to add another table with a common column.	
		
        Decide which table you want to use as the left table (immediately after FROM) and which will be the right table (immediately after JOIN).
		
        Determine which table you want to include all records from. This will help you decide which type of JOIN to use. 
        If you want all records from the first table, use a LEFT JOIN. If you want all records from the second table, use a RIGHT JOIN. 
        If you want records from both tables only where there is a match, use an INNER JOIN.
		
        Use table aliases to make your queries easier to read and understand. This is especially important when working with multiple tables.
		
        Write the query

Tip 2:  Break down the problem into smaller, more manageable parts. For example, you might start by writing a query to retrieve data from just two tables 
		before adding additional tables to the join. Test your queries as you go, and check the output carefully to make sure it matches what you expect. 
		This process takes time, so be patient and go step by step to build your query incrementally.
